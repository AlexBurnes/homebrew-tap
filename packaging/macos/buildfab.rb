# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Buildfab < Formula
  desc "Go-based automation runner with DAG-based execution"
  homepage "https://github.com/AlexBurnes/buildfab"
  version "0.8.10"
  license "MIT"

  on_macos do
    on_intel do
      url "https://github.com/AlexBurnes/buildfab/releases/download/v0.8.10/buildfab_macos_amd64.tar.gz"
      sha256 "bb42124464027b9b09895a9c991dcc5750765ee6940a8c775556e3cc574a578f"

      def install
        bin.install "buildfab"
      end
    end
    on_arm do
      url "https://github.com/AlexBurnes/buildfab/releases/download/v0.8.10/buildfab_macos_arm64.tar.gz"
      sha256 "8fa154bc4ac43d3c60aab04144157f6f70577e1a42bb54ac8c26823274067c29"

      def install
        bin.install "buildfab"
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/AlexBurnes/buildfab/releases/download/v0.8.10/buildfab_linux_amd64.tar.gz"
        sha256 "be62e129565ce2f444db14cf8f9724123449c24b35e7ce20c8fc917c7ebd58da"

        def install
          bin.install "buildfab"
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/AlexBurnes/buildfab/releases/download/v0.8.10/buildfab_linux_arm64.tar.gz"
        sha256 "19608a3ddb262405016811d7f83ed77242d6a8ded5772d999c039d15bd0c7670"

        def install
          bin.install "buildfab"
        end
      end
    end
  end

  test do
    system "#{bin}/buildfab --version"
    system "#{bin}/buildfab --help"
    system "#{bin}/buildfab list-actions"
  end
end
